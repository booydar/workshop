digraph pn {
rankdir=LR;
"a" -> "P((('a',), ('b', 'x', 'e')))";
"a" [shape=box];
"P((('a',), ('b', 'x', 'e')))" [shape=circle];
"P((('a',), ('b', 'x', 'e')))" -> "b";
"b" [shape=box];
"P((('a',), ('b', 'x', 'e')))" -> "x";
"x" [shape=box];
"P((('a',), ('b', 'x', 'e')))" -> "e";
"e" [shape=box];
"a" -> "P((('a',), ('c', 'e')))";
"a" [shape=box];
"P((('a',), ('c', 'e')))" [shape=circle];
"P((('a',), ('c', 'e')))" -> "c";
"c" [shape=box];
"P((('a',), ('c', 'e')))" -> "e";
"e" [shape=box];
"t" -> "P((('t',), ('o',)))";
"t" [shape=box];
"P((('t',), ('o',)))" [shape=circle];
"P((('t',), ('o',)))" -> "o";
"o" [shape=box];
"x" -> "P((('x',), ('c',)))";
"x" [shape=box];
"P((('x',), ('c',)))" [shape=circle];
"P((('x',), ('c',)))" -> "c";
"c" [shape=box];
"c" -> "P((('c',), ('v', 'd')))";
"c" [shape=box];
"P((('c',), ('v', 'd')))" [shape=circle];
"P((('c',), ('v', 'd')))" -> "v";
"v" [shape=box];
"P((('c',), ('v', 'd')))" -> "d";
"d" [shape=box];
"e" -> "P((('e',), ('w',)))";
"e" [shape=box];
"P((('e',), ('w',)))" [shape=circle];
"P((('e',), ('w',)))" -> "w";
"w" [shape=box];
"v" -> "P((('v',), ('l',)))";
"v" [shape=box];
"P((('v',), ('l',)))" [shape=circle];
"P((('v',), ('l',)))" -> "l";
"l" [shape=box];
"k" -> "P((('k',), ('a',)))";
"k" [shape=box];
"P((('k',), ('a',)))" [shape=circle];
"P((('k',), ('a',)))" -> "a";
"a" [shape=box];
"b" -> "P((('b',), ('d',)))";
"b" [shape=box];
"P((('b',), ('d',)))" [shape=circle];
"P((('b',), ('d',)))" -> "d";
"d" [shape=box];
"w" -> "P((('w',), ('t',)))";
"w" [shape=box];
"P((('w',), ('t',)))" [shape=circle];
"P((('w',), ('t',)))" -> "t";
"t" [shape=box];
"d" -> "P((('d', 'l'), ('z',)))";
"d" [shape=box];
"P((('d', 'l'), ('z',)))" [shape=circle];
"l" -> "P((('d', 'l'), ('z',)))";
"l" [shape=box];
"P((('d', 'l'), ('z',)))" [shape=circle];
"P((('d', 'l'), ('z',)))" -> "z";
"z" [shape=box];
"o" -> "P((('o',), ('k',)))";
"o" [shape=box];
"P((('o',), ('k',)))" [shape=circle];
"P((('o',), ('k',)))" -> "k";
"k" [shape=box];
In -> a
z -> Out
}